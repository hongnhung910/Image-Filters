# -*- coding: utf-8 -*-
"""cartoonize.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gGLZDXlxVO48O2wvJtVXhSt9aFkfiw_c
"""

import cv2
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
def edge_detection(img_rgb):
  img_small = cv2.resize(img_rgb, (0,0), fx=0.5, fy=0.5)
  img_small = cv2.pyrDown(img_rgb)
  num_iter = 5
  for _ in range(num_iter):
    img_small = cv2.bilateralFilter(img_small, d=9, sigmaColor=9, sigmaSpace=7)
    
  img_rgb = cv2.pyrUp(img_small)
# convert to grayscale and apply median blur
  img_gray = cv2.cvtColor(img_rgb, cv2.COLOR_RGB2GRAY)
  img_blur = cv2.medianBlur(img_gray, 7)

  img_edge = cv2.adaptiveThreshold(img_blur, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 9, 2)
# cv2.imwrite('out_img_edge.jpg', img_edge)

  img = Image.fromarray(img_edge)
  return img
def render(img_dir):
    numDownSamples = 2 # number of downscaling steps
    numBilateralFilters = 7  # number of bilateral filtering steps
    
    img_rgb = cv2.imread(img_dir)[:,:,::-1]
    img_color= img_rgb
    
    for _ in range(numDownSamples):
        img_color = cv2.pyrDown(img_color)
    
        # repeatedly apply small bilateral filter instead of applying
        # one large filter
    for _ in range(numBilateralFilters):
        img_color = cv2.bilateralFilter(img_color, 9, 9, 7)
    
        # upsample image to original size
    for _ in range(numDownSamples):
        img_color = cv2.pyrUp(img_color)
    
        # -- STEPS 2 and 3 --
        # convert to grayscale and apply median blur
    img_gray = cv2.cvtColor(img_rgb, cv2.COLOR_RGB2GRAY)
    img_blur = cv2.medianBlur(img_gray, 7)
    
        # -- STEP 4 --
        # detect and enhance edges
    img_edge = cv2.adaptiveThreshold(img_blur, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 9, 2)
    
        # -- STEP 5 --
        # convert back to color so that it can be bit-ANDed
        # with color image
    img_edge = cv2.cvtColor(img_edge, cv2.COLOR_GRAY2RGB)
    return cv2.bitwise_and(img_rgb, img_edge)
def sketch(img):
  grey_img=cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
  invert_img=cv2.bitwise_not(grey_img)
  blur_img=cv2.GaussianBlur(invert_img, (111,111),0)
  invblur_img=cv2.bitwise_not(blur_img)
  sketch_img=cv2.divide(grey_img,invblur_img, scale=256.0)
  plt.figure(figsize=(14,8))
  plt.subplot(1,2,1)
  plt.title('Original image', size=18)
  plt.imshow(img)
  plt.axis('off')
  plt.subplot(1,2,2)
  plt.title('Sketch', size=18)
  rgb_sketch=cv2.cvtColor(sketch_img, cv2.COLOR_BGR2RGB)
  plt.imshow(rgb_sketch)
  plt.axis('off')
  plt.show()